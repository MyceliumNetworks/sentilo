#!/bin/bash
### BEGIN INIT INFO
# Provides:          sentilo
# Required-Start:    $remote_fs $syslog redis-server mongodb mysql tomcat7
# Required-Stop:     $remote_fs $syslog redis-server mongodb mysql tomcat7
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

# Settings
sentilopath="/opt"	# Where services are installed
startwait=6		# Seconds to wait before starting the next service
stopwait=3		# Seconds to wait before stopping the next service

# Enabled agents. Change to "false" to disable.
EnableRelational=true
EnableAlert=false
EnableLocationUpdater=false

checkroot() {
	if [ $UID != 0 ]; then
		echo "Aborting Sentilo script: you must be root"
		exit 1
	fi
}

getpids() {
	ss_PID=$(ps x | grep java | grep [s]entilo-server | awk '{print $1}')
	sars_PID=$(ps x | grep java | grep [s]entilo-agent-relational-server | awk '{print $1}')
	saas_PID=$(ps x | grep java | grep [s]entilo-agent-alert-server | awk '{print $1}')
	salus_PID=$(ps x | grep java | grep [s]entilo-agent-location-updater-server | awk '{print $1}')
}

# Start pub/sub server and agents
start() {
	checkroot
	getpids
	printf "\nSTARTING SENTILO"
	printf "\nStarting subscription/publication server...: "
        if [ ! -z $ss_PID ]; then
                printf "Already running, PID $ss_PID"
	else
	        eval '$sentilopath/sentilo-server/bin/sentilo-server >/dev/null 2>&1 &'
        	sleep $startwait
		getpids
		if [ ! -z $ss_PID ]; then
			printf "Started, PID $ss_PID"
		else
			printf "ERROR"
		fi
        fi
        printf "\nStarting relational database agent.........: "
	if [ $EnableRelational == true ]; then
	        if [ ! -z $sars_PID ]; then
        	        printf "Already running, PID $sars_PID"
        	else
                	eval '$sentilopath/sentilo-agent-relational/bin/sentilo-agent-relational-server >/dev/null 2>&1 &'
                	sleep $startwait
                	getpids
                	if [ ! -z $sars_PID ]; then
                        	printf "Started, PID $sars_PID"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
        printf "\nStarting alerts agent......................: "
	if [ $EnableAlert == true ]; then
	        if [ ! -z $saas_PID ]; then
        	        printf "Already running, PID $saas_PID"
        	else
                	eval '$sentilopath/sentilo-agent-alert/bin/sentilo-agent-alert-server >/dev/null 2>&1 &'
                	sleep $startwait
                	getpids
                	if [ ! -z $saas_PID ]; then
                        	printf "Started, PID $saas_PID"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
	printf "\nStarting location updater agent............: "
	if [ $EnableLocationUpdater == true ]; then
	        if [ ! -z $salus_PID ]; then
        	        printf "Already running, PID $salus_PID"
        	else
                	eval '$sentilopath/sentilo-agent-location-updater/bin/sentilo-agent-location-updater-server >/dev/null 2>&1 &'
                	sleep $startwait
                	getpids
                	if [ ! -z $salus_PID ]; then
                        	printf "Started, PID $salus_PID"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
	printf "\n"
}

# Stop pub/sub server and agents
stop() {
	checkroot
	getpids
	printf "\nSTOPPING SENTILO"
        printf "\nStopping location updater agent............: "
	if [ $EnableLocationUpdater == true ]; then
	        if [ -z $salus_PID ]; then
        	        printf "Not running"
        	else
			kill $salus_PID
                	sleep $stopwait
                	getpids
                	if [ -z $salus_PID ]; then
                        	printf "Stopped"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
        printf "\nStopping alerts agent......................: "
	if [ $EnableAlert == true ]; then
	        if [ -z $saas_PID ]; then
        	        printf "Not running"
        	else
			kill $saas_PID
                	sleep $stopwait
                	getpids
                	if [ -z $saas_PID ]; then
                        	printf "Stopped"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
        printf "\nStopping relational database agent.........: "
	if [ $EnableRelational == true ]; then
	        if [ -z $sars_PID ]; then
        	        printf "Not running"
       		else
                	kill $sars_PID
                	sleep $stopwait
                	getpids
                	if [ -z $sars_PID ]; then
                        	printf "Stopped"
                	else
                        	printf "ERROR"
                	fi
        	fi
        else
                printf "Disabled"
        fi
        printf "\nStopping subscription/publication server...: "
        if [ -z $ss_PID ]; then
                printf "Not running"
        else
		kill $ss_PID
                sleep $stopwait
                getpids
                if [ -z $ss_PID ]; then
                        printf "Stopped"
                else
                        printf "ERROR"
                fi
        fi
	printf "\n"
}

# Show services status
status() {
	checkroot
	getpids
	printf "\nCHECKING SENTILO SERVICES STATUS"
	printf "\nChecking subscription/publication server...: "
        if [ ! -z $ss_PID ]; then
                printf "Running, PID $ss_PID"
        else
                printf "Not running"
        fi
        printf "\nChecking relational database agent.........: "
	if [ $EnableRelational == true ]; then
	        if [ ! -z $sars_PID ]; then
        	        printf "Running, PID $sars_PID"
        	else
                	printf "Not running"
        	fi
	else
		printf "Disabled"
	fi
        printf "\nChecking alerts agent......................: "
        if [ $EnableAlert == true ]; then
	        if [ ! -z $saas_PID ]; then
        	        printf "Running, PID $saas_PID"
        	else
                	printf "Not running"
        	fi
        else
                printf "Disabled"
        fi
        printf "\nChecking location updater agent............: "
        if [ $EnableLocationUpdater == true ]; then
        	if [ ! -z $salus_PID ]; then
                	printf "Running, PID $salus_PID"
        	else
                	printf "Not running"
        	fi
        else
                printf "Disabled"
        fi
        printf "\n"
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        start
        ;;
  status)
        status
        ;;
  *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit 0
